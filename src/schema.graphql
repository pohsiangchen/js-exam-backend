# import Interview from './generated/prisma.graphql'
# import Exam from './generated/prisma.graphql'
# import Summary from './generated/prisma.graphql'
# import History from './generated/prisma.graphql'
# import SnapComment from './generated/prisma.graphql'
# import Question from './generated/prisma.graphql'
# import QuestionSnapshot from './generated/prisma.graphql'

type Query {
  exam(where: ExamWhereUniqueInput!): Exam
  exams(where: ExamWhereInput, orderBy: ExamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ExamConnection!
  history(where: HistoryWhereUniqueInput!): History
  histories(where: HistoryWhereInput, orderBy: HistoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HistoryConnection!
  interview(where: InterviewWhereUniqueInput!): Interview
  interviews(where: InterviewWhereInput, orderBy: InterviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InterviewConnection!
  question(where: QuestionWhereUniqueInput!): Question
  questions(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QuestionConnection!
  questionSnapshot(where: QuestionSnapshotWhereUniqueInput!): QuestionSnapshot  
  questionSnapshots(where: QuestionSnapshotWhereInput, orderBy: QuestionSnapshotOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QuestionSnapshotConnection!
  snapComment(where: SnapCommentWhereUniqueInput!): SnapComment
  snapComments(where: SnapCommentWhereInput, orderBy: SnapCommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SnapCommentConnection!
  summary(where: SummaryWhereUniqueInput!): Summary
  summaries(where: SummaryWhereInput, orderBy: SummaryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SummaryConnection!
  feed: [Post!]!
  drafts: [Post!]!
  post(id: ID!): Post
  me: User
}

type Mutation {
  signup(email: String!, password: String!, name: String!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  createDraft(title: String!, content: String!): Post!
  publish(id: ID!): Post!
  deletePost(id: ID!): Post!
}

type Subscription {
  feedSubscription: Post
}

type AuthPayload {
  token: String!
  user: User!
}

type User {
  id: ID!
  email: String!
  name: String!
  posts: [Post!]!
}

type Post {
  id: ID!
  published: Boolean!
  title: String!
  content: String!
  author: User!
}
